services:
  # ==========================
  # 🚀 Main Application (FastAPI + Streamlit)
  # ==========================
  tradingbot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: crypto_trading_bot_app
    env_file:
      - .env
    ports:
      - "8000:8000"   # FastAPI
      - "8501:8501"   # Streamlit
      - "5000:5000"   # MLflow or analytics
    volumes:
      - ./src:/app/src:cached
      - ./main.py:/app/main.py:cached
      - ./logs:/app/logs
      - models_data:/app/src/models
      - .env:/app/.env:ro
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "python main.py"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ==========================
  # 🗄️ Database Service (PostgreSQL)
  # ==========================
  db:
    image: postgres:16
    container_name: tradingbot_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  # ==========================
  # 🤖 Worker Service (Trading Bot Engine)
  # ==========================
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: tradingbot_worker
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - models_data:/app/src/models
    command: >
      sh -c "python src/bot_runner.py"
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f bot_runner || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ==========================
  # 🧪 Testing Container
  # ==========================
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: tradingbot_tests
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - models_data:/app/src/models
    command: >
      sh -c "pytest -v --maxfail=1 --disable-warnings -q"

# ==========================
# 📦 Persistent Volumes
# ==========================
volumes:
  postgres_data:
  models_data:
    name: tradingbot_models
